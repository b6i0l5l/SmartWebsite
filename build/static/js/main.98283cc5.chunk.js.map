{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","recognition","window","SpeechRecognition","webkitSpeechRecognition","continous","interimResults","lang","Speech","state","listening","bgcolor","toggleListen","bind","handleListen","this","setState","console","log","start","onend","stop","onstart","onresult","event","finalTranscript","i","resultIndex","results","length","transcript","isFinal","$","ajax","url","data","success","result","alert","document","getElementById","innerHTML","transcriptArr","split","stopCmd","slice","finalText","join","onerror","error","style","container","className","backgroundColor","id","button","onClick","src","logo","alt","final","Component","flexDirection","alignItems","textAlign","background","borderWidth","color","padding","margin","width","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.98283cc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","'use strict'\nimport React, { Component } from \"react\"\nimport $ from 'jquery';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n//------------------------SPEECH RECOGNITION-----------------------------\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\nconst recognition = new SpeechRecognition()\n\nrecognition.continous = true\nrecognition.interimResults = true\nrecognition.lang = 'zh-TW'\n\n\n//------------------------COMPONENT-----------------------------\n\nclass Speech extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      listening: false,\n      bgcolor:'#282c34'\n    }\n    this.toggleListen = this.toggleListen.bind(this)\n    this.handleListen = this.handleListen.bind(this)\n  }\n\n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen)\n  }\n\n  handleListen() {\n\n    console.log('listening?', this.state.listening)\n\n    if (this.state.listening) {\n      recognition.start()\n      recognition.onend = () => {\n        console.log(\"...continue listening...\")\n        recognition.start()\n      }\n\n    } else {\n      recognition.stop()\n      recognition.onend = () => {\n        console.log(\"Stopped listening per click\")\n      }\n    }\n\n    recognition.onstart = () => {\n      console.log(\"Listening!\")\n      this.setState({\n        bgcolor:'#282c34'\n      })\n    }\n\n    let intermiTranscript = ''\n    recognition.onresult = event => {\n      let finalTranscript = ''\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) intermiTranscript += transcript + ' ';\n        else finalTranscript += transcript;\n      }\n      console.log(finalTranscript)\n      if (finalTranscript === \"開始煮飯\"){\n        console.log(\"指令成功！\")\n        this.setState({\n          bgcolor:'#006400'\n        })\n        $.ajax({\n          url:\"https://maker.ifttt.com/trigger/ricecookeron/with/key/dyMeTmyKz4_uQNNPyqZABx\",\n          data: {\"value1\":\"rice cooker on\"},\n          success:function(result){alert(result)}\n        })\n      }\n      else if(finalTranscript === \"關掉電源\"){\n        console.log(\"指令成功！\")\n        this.setState({\n          bgcolor:'#006400'\n        })\n        $.ajax({\n          url:\"https://maker.ifttt.com/trigger/ricecookeroff/with/key/dyMeTmyKz4_uQNNPyqZABx\",\n          data: {\"value1\":\"rice cooker off\"},\n          success:function(result){alert(result)}\n        })\n      }\n      document.getElementById('final').innerHTML = finalTranscript\n\n      //-------------------------COMMANDS------------------------------------\n\n      const transcriptArr = finalTranscript.split(' ')\n      const stopCmd = transcriptArr.slice(-3, -1)\n      console.log('stopCmd', stopCmd)\n\n      if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening'){\n        recognition.stop()\n        recognition.onend = () => {\n          console.log('Stopped listening per command')\n          const finalText = transcriptArr.slice(0, -3).join(' ')\n          document.getElementById('final').innerHTML = finalText\n        }\n      }\n    }\n\n    //-----------------------------------------------------------------------\n\n    recognition.onerror = event => {\n      console.log(\"Error occurred in recognition: \" + event.error)\n    }\n\n  }\n\n  render() {\n    return (\n        <div style={container}>\n          <header className=\"App-header\" style={{backgroundColor: this.state.bgcolor}}>\n            <button id='microphone-btn' style={button} onClick={this.toggleListen}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            </button>\n            <div id='final' style={final}></div>\n          </header>\n        </div>\n    )\n  }\n}\n\nexport default Speech\n\n\n//-------------------------CSS------------------------------------\n\nconst styles = {\n  container: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  body: {\n    background: 'black'\n  },\n  button: {\n    background: 'transparent',\n    borderWidth:0\n  },\n  final: {\n    color: 'white',\n    borderWidth:0,\n    padding: '1em',\n    margin: '1em',\n    width: '300px',\n    textAlign: 'center'\n  }\n}\n\nconst { container, button, final, body} = styles\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}