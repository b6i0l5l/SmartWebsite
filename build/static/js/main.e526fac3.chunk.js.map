{"version":3,"sources":["Components/logo.svg","Components/GetApi.js","Components/Login.js","Components/CoreInit.js","Components/Clock.js","Components/LogOut.js","Components/Core.js","Components/RequestOptions.js","Components/PostApi.js","Components/CommandForm.js","Components/DevicesMenu.js","Components/DevicesAndCommands.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","username","device","fetch","res","json","data","user","console","log","LoginForm","useForm","register","handleSubmit","history","useHistory","onSubmit","a","GetApi","authenticInfo","push","style","width","fontSize","display","flexDirection","className","ref","name","defaultValue","height","backgroundColor","listening","microphone","bgcolor","time","Date","toLocaleString","usercommands","Clock","useState","date","setDate","useEffect","timerID","setInterval","clearInterval","toLocaleTimeString","LogOut","position","top","left","onClick","recognition","window","webkitSpeechRecognition","SpeechRecognition","continous","interimResults","lang","confirmCommand","SpeechSynthesisUtterance","Speech","Init","commandsAndDevices","setState","location","useLocation","state","CommandsAndDevices","states","getCommandsAndDevicesByUser","getDeviceBytriggerCommand","command","i","length","speechSynthesis","speak","handleListen","start","onend","stop","onresult","event","finalTranscript","results","isFinal","document","getElementById","innerHTML","onerror","error","id","src","logo","alt","color","right","method","headers","body","JSON","stringify","request","then","response","CommandForm","props","newCommand","requestdata","requestOptions","post","paddingBottom","paddingTop","DropDownMenu","devices","setDeviceState","fetchCommandsAndDevices","handleChange","e","target","value","getCommandByDeviceID","onChange","map","key","DevicesAndCommands","minHeight","alignItems","justifyContent","DevicesMenu","App","path","exact","component","Core","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,2OCA7B,WACeC,EAAUC,GAAQ,OAAD,4HAC1BC,MAAM,wCAAyCD,EAAO,aAAaD,GADzC,cACtCG,EADsC,gBAEzBA,EAAIC,OAFqB,cAEtCC,EAFsC,yBAGnC,CAAC,OAASJ,EAAQ,QAAUI,EAAI,UAHG,8CADhC,WAMWC,GAAM,OAAD,4HACVJ,MAAM,wDAAyDI,EAAI,SAAa,aAAaA,EAAI,UADvF,cACtBH,EADsB,gBAETA,EAAIC,OAFK,cAEtBC,EAFsB,OAG1BE,QAAQC,IAAIH,GAHc,kBAInBA,GAJmB,8CANhB,WAkBsBC,GAAM,OAAD,4HACrBJ,MAAM,6CAA6CI,GAD9B,cACjCH,EADiC,gBAEpBA,EAAIC,OAFgB,cAEjCC,EAFiC,OAGrCE,QAAQC,IAAIH,GAHyB,kBAI9BA,GAJ8B,8CAlB3B,WAwBcJ,GAAQ,OAAD,4HACfC,MAAM,wCAAwCD,GAD/B,cAC3BE,EAD2B,gBAEdA,EAAIC,OAFU,cAE3BC,EAF2B,OAG/BE,QAAQC,IAAIH,GAHmB,kBAIxBA,GAJwB,8C,OCOpBI,G,MAzBG,WAAO,IAAD,EACWC,cAA1BC,EADe,EACfA,SAAUC,EADK,EACLA,aACXC,EAAUC,cAEVC,EAAQ,uCAAG,WAAOT,GAAP,eAAAU,EAAA,sEACaC,EAAwBX,GADrC,QACTY,EADS,QAEC,QACdL,EAAQM,KAAM,QAAUD,GAHX,2CAAH,sDAOd,OACE,6BACE,0BAAME,MAAO,CAACC,MAAM,QAASC,SAAS,OAAQC,QAAQ,OAAQC,cAAe,UAAWT,SAAUH,EAAaG,IAC7G,2BAAOU,UAAU,cAAjB,cACA,2BAAOA,UAAU,aAAaC,IAAKf,EAAUgB,KAAK,WAAWC,aAAc,KAC3E,2BAAOH,UAAU,cAAjB,cACA,2BAAOA,UAAU,aAAaC,IAAKf,EAAUgB,KAAK,WAAWC,aAAc,KAC3E,6BACA,4BAAQR,MAAO,CAACS,OAAO,OAAQC,gBAAgB,UAAWR,SAAS,SAAnE,a,gDCzBO,G,YAAA,CACbS,WAAW,EACXC,WAAW,MACXC,QAAQ,UACRC,MAAM,IAAIC,MAAOC,iBACjBpC,SAAS,GACTqC,aAAa,KCiBAC,EArBD,WAAO,IAAD,EACMC,mBAAS,IAAIJ,MADnB,mBACXK,EADW,KACLC,EADK,KAcjB,OAXFC,qBAAU,WACT,IAAIC,EAAUC,aAAa,WAOzBH,EAAQ,IAAIN,QAP2B,KAEzC,OAAO,WACHU,cAAcF,OAQd,6BACE,2BAAIH,EAAKM,wBCFFC,EAbA,WACb,IAAMlC,EAAUC,cAKd,OACE,6BACE,4BAAQM,MAAO,CAAC4B,SAAU,WAAYC,IAAK,GAAIC,KAAM,GAAI7B,MAAO,IAAKQ,OAAQ,IAAKsB,QANpE,WAClBtC,EAAQM,KAAM,OAKV,aCIFiC,EAAc,IADMC,OAAOC,yBAA2BD,OAAOE,mBAEnEH,EAAYI,WAAY,EACxBJ,EAAYK,gBAAiB,EAC7BL,EAAYM,KAAO,QAInB,IAAMC,EAAiB,IAAIC,yBAAyB,OAyHrCC,EArHA,WAAO,IAAD,EACsDtB,mBAASuB,GAD/D,0BACX/B,EADW,EACXA,UAAWC,EADA,EACAA,WAAYC,EADZ,EACYA,QAAS8B,EADrB,EACqBA,mBAAqBC,EAD1C,KAEbC,EAAWC,cAEjBxB,qBAAW,WAAM,4CAEf,4BAAA1B,EAAA,sEACmCC,EAAmCgD,EAASE,MAAT,UADtE,OACQC,EADR,OAEEJ,GAAS,SAAAK,GAAM,kCAASA,GAAT,IAAiBN,mBAAoBK,OAFtD,4CAFe,sBAOf,OAPe,mCAMfE,GACO,YAAoB,KAC1B,IAEH,IAKMC,EAAyB,uCAAG,WAAOC,GAAP,eAAAxD,EAAA,sDACvByD,EAAI,EADmB,YAChBA,EAAIV,EAAmBW,QADP,mBAE1BF,IAAYT,EAAmBU,GAAnB,QAFc,gCAGtBxD,EAA2B8C,EAAmBU,GAAnB,QAHL,OAI5BE,gBAAgBC,MAAMjB,GAJM,OACec,IADf,0DAAH,sDASzBI,EAAe,WACf9C,GACFiC,GAAS,SAAAK,GAAM,kCAAUA,GAAV,IAAkBrC,WAAW,aAC5CoB,EAAY0B,QACZ1B,EAAY2B,MAAQ,WAClB3B,EAAY0B,WAGd1B,EAAY4B,OACZ5B,EAAY2B,MAAQ,WAClBf,GAAS,SAAAK,GAAM,kCAAUA,GAAV,IAAkBrC,WAAY,aAIjDoB,EAAY6B,SAAW,SAACC,GACtB,IAAIC,EAAkB,IACtBA,EAAkBD,EAAME,QAAQ,GAAG,GAAjB,WACdF,EAAME,QAAQ,GAAGC,UACnBd,EAA0BY,GAC1BA,EAAkB,KAmCpBG,SAASC,eAAe,SAASC,UAAYL,GAI/C/B,EAAYqC,QAAU,SAAAP,GACpB3E,QAAQC,IAAI,kCAAoC0E,EAAMQ,SAIpD7E,EAAUC,cAShB,OACI,6BACE,4BAAQW,UAAU,YAAYL,MAAO,CAACU,gBAAiBG,IACrD,kBAAC,EAAD,MACA,qDACA,4BAAQb,MAAO,CAAC4B,SAAU,WAAYC,IAAK,GAAIC,KAAM,GAAI7B,MAAO,IAAKQ,OAAQ,IAAKsB,QAbtE,WAClBC,EAAY4B,OACZ5B,EAAY2B,MAAQ,WAChBf,GAAS,SAAAG,GAAK,kCAAUA,GAAV,IAAiBnC,WAAY,YAE/CnB,EAAQM,KAAM,sBAAwB8C,EAASE,SAQzC,mBACA,kBAAC,EAAD,MACA,4BAAQwB,GAAG,iBAAiBlE,UAAU,aAAa0B,QA7FtC,WACnBa,GAAS,SAAAG,GAAK,kCAAUA,GAAV,IAAiBpC,WAAYA,OAC3C8C,MA4FQ,yBAAKe,IAAKC,IAAMpE,UAAU,UAAUqE,IAAI,UAE1C,yBAAKH,GAAG,QAAQlE,UAAU,qBAE5B,kBAAC,IAAD,CAASH,SAAS,QAAQF,MAAO,CAAC4B,SAAS,WAAY+C,MAAM/D,EAAYiB,IAAI,GAAI+C,MAAM,Q,QC1IhF,WACN/F,EAAOI,GAMV,MALuB,CACrB4F,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE,OAAUpG,EAAQ,QAAWI,MCL9C,WAMEiG,GACZpG,MAAM,0CAA2CoG,GAC5CC,MAAK,SAAAC,GAAQ,OAAIjG,QAAQC,IAAIgG,OC4BvBC,G,MA5BK,SAACC,GAAW,IAAD,EACIhG,cAA1BC,EADsB,EACtBA,SAAUC,EADY,EACZA,aACbC,EAAUC,cAERC,EAAQ,uCAAG,WAAO4F,GAAP,eAAA3F,EAAA,6DACT4F,EAAcC,EAAsBH,EAAK,MAAL,OAA0BC,EAAU,SAD/D,SAETG,EAAmBF,GAFV,2CAAH,sDAKR3C,EAAWC,cAIjB,OACE,6BACE,0BAAM9C,MAAO,CAACC,MAAM,QAASC,SAAS,OAAQC,QAAQ,OAAQC,cAAe,UAAWT,SAAUH,EAAaG,IAC7G,2BAAOK,MAAO,CAAC2E,MAAM,QAASgB,cAAc,OAAOC,WAAW,SAA9D,aACA,2BAAO5F,MAAO,CAACS,OAAO,OAAQP,SAAS,QAASI,IAAKf,EAAUgB,KAAK,UAAUC,aAAc8E,EAAK,MAAL,UAC5F,6BACA,yBAAKtF,MAAO,CAACG,QAAQ,OAAQC,cAAc,QACzC,4BAAQC,UAAU,oBAAoB0B,QAVzB,WACnBtC,EAAQM,KAAK,QAAQ8C,EAASE,SASxB,WACA,4BAAQ1C,UAAU,qBAAlB,eCqBKwF,EA7CM,WAAO,IAAD,EACS1E,mBAAS,IADlB,mBAClB2E,EADkB,KACTC,EADS,KAEnBlD,EAAWC,cAFQ,EAIE3B,mBAAS,CAClCtC,OAAO,WACPuE,QAAQ,GACRxE,SAAS,KAPc,mBAIlBqE,EAJkB,KAIVL,EAJU,KAUzBtB,qBAAU,WAAM,4CACd,4BAAA1B,EAAA,sEAC4CC,EAAmCgD,EAASE,MAAT,UAD/E,OACQG,EADR,OAEE6C,EAAe7C,GACfN,GAAS,SAAAK,GAAM,kCAAUA,GAAV,IAAkBrE,SAASiE,EAASE,MAAT,SAA4BK,QAAQF,EAA4B,GAA5B,aAHhF,4CADc,uBAAC,WAAD,wBAOd8C,KACD,IAEH,IAAMC,EAAY,uCAAG,WAAOC,GAAP,eAAAtG,EAAA,sEACgBC,EAA4BgD,EAASE,MAAT,SAA4BmD,EAAEC,OAAOC,OADjF,OACbC,EADa,OAEnBzD,GAAS,SAAAK,GAAM,kCAAUA,GAAV,IAAkBrE,SAASiE,EAASE,MAAT,SAA4BlE,OAAOwH,EAAoB,OAAYjD,QAAQiD,EAAoB,aAFtH,2CAAH,sDAKhB,OACE,6BACE,uBAAGrG,MAAO,CAACE,SAAS,SAApB,eACA,4BAAQF,MAAO,CAACC,MAAM,QAASQ,OAAO,OAAQP,SAAS,QACtDoG,SAAU,SAAAJ,GAAC,OAAID,EAAaC,KAC1BJ,EAAQS,KAAI,SAAA1H,GAAM,OACjB,4BACE2H,IAAK3H,EAAM,OACXuH,MAAOvH,EAAM,QAEZA,EAAM,YAIb,kBAAC,EAAD,CAAauH,MAAOnD,MC9BXwD,EAVY,WACvB,OACE,yBAAKzG,MAAO,CAAE2E,MAAM,QAAS+B,UAAW,QAAShG,gBAAgB,UAAWP,QAAQ,OAAQC,cAAe,SAC3GuG,WAAY,SAAUC,eAAgB,WACpC,kBAAC,EAAD,MACA,kBAACC,EAAD,QCWOC,EAbH,WACT,OACE,kBAAC,IAAD,KACE,yBAAK9G,MAAO,CAAE2E,MAAM,QAAS+B,UAAW,QAAShG,gBAAgB,UAAWP,QAAQ,OAAQC,cAAe,SACxGuG,WAAY,SAAUC,eAAgB,WACxC,kBAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,EAACC,UAAW5H,IACjC,kBAAC,IAAD,CAAO0H,KAAK,sBAAsBC,OAAK,EAACC,UAAWR,IACnD,kBAAC,IAAD,CAAOM,KAAK,QAAQC,OAAK,EAACC,UAAWC,OCFzBC,QACW,cAA7BlF,OAAOY,SAASuE,UAEe,UAA7BnF,OAAOY,SAASuE,UAEhBnF,OAAOY,SAASuE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASC,eAAe,SDyHpB,kBAAmBsD,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLnF,QAAQmF,MAAMA,EAAMyD,c","file":"static/js/main.e526fac3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default{\n  async getCommandByDeviceID(username, device){\n    let res = await fetch('http://127.0.0.1:8000/api/getcommand/'+ device+'?username='+username);\n    let data = await res.json();\n    return {\"device\":device, \"command\":data['command']};\n  },\n  async checkUserAccount(user){\n    let res = await fetch('http://127.0.0.1:8000/api/check/useraccount?username='+ user['username']+'&password='+user['password'])\n    let data = await res.json();\n    console.log(data);\n    return data;\n  },\n  async getCommandsByUser(user){\n    let res = await fetch('http://127.0.0.1:8000/api/getallcommands/'+user)\n    let data = await res.json();\n    console.log(data);\n    return data;\n  },\n  async getCommandsAndDevicesByUser(user){\n    let res = await fetch('http://127.0.0.1:8000/api/getdevicesinfos/'+user)\n    let data = await res.json();\n    console.log(data);\n    return data;\n  },\n  async getTriggerByCommand(device){\n    let res = await fetch('http://127.0.0.1:8000/api/gettrigger/'+device)\n    let data = await res.json();\n    console.log(data);\n    return data;\n  }\n\n}\n","import React from 'react';\nimport {useForm} from 'react-hook-form';\nimport GetApi from './GetApi.js';\nimport {useHistory} from 'react-router-dom';\nimport './Login.css';\n\nconst LoginForm = () => {\n  const {register, handleSubmit} = useForm();\n  const history = useHistory();\n  \n  const onSubmit = async (user) => {\n    const authenticInfo = await GetApi.checkUserAccount(user);\n    if(authenticInfo['status']){\n      history.push((\"/core\"), authenticInfo);\n    }\n  }\n\n  return (\n    <div>\n      <form style={{width:'250px', fontSize:'28px', display:'flex', flexDirection: 'column'}} onSubmit={handleSubmit(onSubmit)}>\n        <label className=\"LoginLabel\">Username: </label>\n        <input className=\"LoginInput\" ref={register} name=\"username\" defaultValue={''}></input>\n        <label className=\"LoginLabel\">Password: </label>\n        <input className=\"LoginInput\" ref={register} name=\"password\" defaultValue={''}></input>\n        <br></br>\n        <button style={{height:'50px', backgroundColor:'#61dafb', fontSize:'28px'}}>Login</button>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginForm","export default {\n  listening: true,\n  microphone:\"red\",\n  bgcolor:'#282c34',\n  time: new Date().toLocaleString(),\n  username:'',\n  usercommands:[],\n}","import React, { useState, useEffect } from 'react';\n\nconst Clock = () => {\n  const [date, setDate] = useState(new Date());\n\n useEffect(() => {\n  var timerID = setInterval( () => tick(), 1000 );\n\n  return function cleanup() {\n      clearInterval(timerID);\n    };\n });\n   function tick() {\n    setDate(new Date());\n   }\n   \n   return (\n      <div>\n        <p>{date.toLocaleTimeString()}</p>\n      </div>\n    );\n}\n\nexport default Clock","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst LogOut = () => {\n  const history = useHistory();\n  const logOutClick = () => {\n    history.push((\"/\"));\n  }\n\n    return (\n      <div>\n        <button style={{position: \"absolute\", top: 10, left: 10, width: 150, height: 20}} onClick={logOutClick}>Log Out</button>\n      </div>\n    );\n}\n\nexport default LogOut","import React, { useState, useEffect } from \"react\";\nimport MicIcon from '@material-ui/icons/Mic';\nimport logo from './logo.svg';\nimport './Core.css';\nimport $ from 'jquery';\nimport Init from './CoreInit.js';\nimport Clock from './Clock.js';\nimport GetApi from './GetApi.js';\nimport LogOut from './LogOut.js';\nimport { useHistory, useLocation} from 'react-router-dom';\n\n\n//------------------------SPEECH RECOGNITION-----------------------------\n\nconst SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continous = true\nrecognition.interimResults = true\nrecognition.lang = \"en-US\"\n\n//------------------------VOICE RECOGNITION-----------------------------\n\nconst confirmCommand = new SpeechSynthesisUtterance(\"Yes\");\n\n//------------------------COMPONENT-----------------------------\n\nconst Speech = () => {\n  const [{listening, microphone, bgcolor, commandsAndDevices}, setState] = useState(Init);\n  const location = useLocation();\n\n  useEffect (() => {\n    let unmounted = false;\n    async function getCommandsAndDevicesByUser(){\n      const CommandsAndDevices = await GetApi.getCommandsAndDevicesByUser(location.state['username']);\n      setState(states => ({...states, commandsAndDevices: CommandsAndDevices}));\n    }\n    getCommandsAndDevicesByUser();\n    return () => { unmounted = true };\n  }, [])\n\n  const toggleListen = () => {\n    setState(state => ({ ...state, listening: !listening}));\n    handleListen();\n  }\n\n  const getDeviceBytriggerCommand = async (command) => {\n    for (let i = 0; i < commandsAndDevices.length; i++){\n      if (command === commandsAndDevices[i][\"command\"]){\n        await GetApi.getTriggerByCommand(commandsAndDevices[i][\"device\"]);\n        speechSynthesis.speak(confirmCommand);\n      }\n    }\n  }\n\n  const handleListen = () => {\n    if (listening) {\n      setState(states => ({ ...states, microphone:\"green\"}));\n      recognition.start()\n      recognition.onend = () => {\n        recognition.start()\n      }\n    } else {\n      recognition.stop()\n      recognition.onend = () => {\n        setState(states => ({ ...states, microphone: \"red\"}));\n      }\n    }\n\n    recognition.onresult = (event) => {\n      let finalTranscript = \" \";\n      finalTranscript = event.results[0][0][\"transcript\"];\n      if (event.results[0].isFinal){\n        getDeviceBytriggerCommand(finalTranscript);\n        finalTranscript = \" \";\n      }\n      // for (let i = 0; i < commandsAndDevices.length; i++){\n      //   if (finalTranscript === commandsAndDevices[i]['command']){\n      //     console.log(\"command success!\")\n      //     triggerDevice(commandsAndDevices[i]['device']);\n      //     setState(state => ({ ...state, bgcolor:'#006400', showlistening:\"Power On\"}));\n      //   }\n      //   else{\n      //     console.log('no command');\n      //   }\n      // }\n      // if (finalTranscript === \"turn on power\"){\n      //   console.log(usercommands[0]);\n      //   console.log(\"command success!\")\n      //   setState(state => ({ ...state, bgcolor:'#006400', showlistening:\"Power On\"}));\n        // $.ajax({\n        //   url:\"https://maker.ifttt.com/trigger/ricecookeron/with/key/dyMeTmyKz4_uQNNPyqZABx\",\n        //   dataType: 'JSONP',\n        //   jsonpCallback: 'callback',\n        //   data: {\"value1\":\"rice cooker on\"},\n        //   success:function(result){alert(result)}\n        // })\n      // }\n      // else if(finalTranscript === \"turn off power\"){\n      //   console.log(\"command success!\")\n      //   setState(state => ({ ...state, bgcolor:'#006400', showlistening:\"Power Off\"}));\n      //   $.ajax({\n      //     url:\"https://maker.ifttt.com/trigger/ricecookeroff/with/key/dyMeTmyKz4_uQNNPyqZABx\",\n      //     dataType: 'JSONP',\n      //     jsonpCallback: 'callback',\n      //     data: {\"value1\":\"rice cooker off\"},\n      //     success:function(result){alert(result)}\n      //   })\n      // }\n      document.getElementById(\"final\").innerHTML = finalTranscript\n    }\n\n    //-----------------------------------------------------------------------\n    recognition.onerror = event => {\n      console.log(\"Error occurred in recognition: \" + event.error)\n    }\n  }\n\n  const history = useHistory();\n  const handleClick = () => {\n    recognition.stop();\n    recognition.onend = () => {\n        setState(state => ({ ...state, microphone: \"red\"}));\n    }\n    history.push((\"/DevicesAndCommands\"), location.state);\n  }\n\n  return (\n      <div>\n        <header className=\"AppHeader\" style={{backgroundColor: bgcolor}}>\n          <Clock></Clock>\n          <div>Click React to speak</div>\n          <button style={{position: \"absolute\", top: 40, left: 10, width: 150, height: 20}} onClick={handleClick}>Update Commands</button>\n          <LogOut></LogOut>\n          <button id='microphone-btn' className=\"CoreButton\" onClick={toggleListen}>\n            <img src={logo} className=\"AppLogo\" alt=\"logo\"/>\n          </button>\n          <div id=\"final\" className=\"CoreFinalScript\"></div>\n        </header>\n        <MicIcon fontSize=\"large\" style={{position:\"absolute\", color:microphone, top:10, right:10}}/>\n      </div>\n  )\n}\n\nexport default Speech","export default {\n  rquest(device,data){\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ 'device': device, 'command': data })\n      };\n      return requestOptions;\n  }\n};","export default{\n  postCommand(request){\n    fetch('http://127.0.0.1:8000/api/postcommand', request)\n        .then(response => console.log(response))\n        .then(re => console.log(re));\n  },\n  updateCommand(request){\n    fetch('http://127.0.0.1:8000/api/updatecommand', request)\n        .then(response => console.log(response))\n        // .then(re => console.log(re));\n  }\n}","import React, { useEffect } from 'react';\nimport {useForm} from 'react-hook-form';\nimport requestOptions from './RequestOptions';\nimport {useHistory } from \"react-router-dom\";\nimport post from './PostApi';\nimport { useLocation } from \"react-router-dom\";\nimport './CommandForm.css';\n\nconst CommandForm = (props) => {\n  const {register, handleSubmit} = useForm();\n  let history = useHistory();\n  \n  const onSubmit = async (newCommand) => {\n    const requestdata = requestOptions.rquest(props['value']['device'], newCommand['command']);\n    await post.updateCommand(requestdata);\n  }\n\n  const location = useLocation();\n  const goBackToCore = () =>{\n    history.push('/core',location.state);\n  }\n  return (\n    <div>\n      <form style={{width:'500px', fontSize:'28px', display:'flex', flexDirection: 'column'}} onSubmit={handleSubmit(onSubmit)}>\n        <label style={{color:'white', paddingBottom:'22px',paddingTop:'22px'}}>Command: </label>\n        <input style={{height:'50px', fontSize:'28px'}} ref={register} name=\"command\" defaultValue={props['value']['command']}></input>\n        <br></br>\n        <div style={{display:'flex', flexDirection:'row'}}>\n          <button className='CommandFormButton' onClick={goBackToCore}>go back</button>\n          <button className='CommandFormButton'>submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default CommandForm","import React, { useState , useEffect} from 'react';\nimport CommandForm from './CommandForm.js';\nimport GetApi from './GetApi';\nimport {useLocation} from 'react-router-dom';\n\nconst DropDownMenu = () => {\n  const [devices, setDeviceState] = useState([]);\n  const location = useLocation();\n  \n  const [states, setState] = useState({\n    device:'plug1-on',\n    command:'',\n    username:''\n  });\n\n  useEffect(() => {\n    async function fetchCommandsAndDevices(){\n      const getCommandsAndDevicesByUser = await GetApi.getCommandsAndDevicesByUser(location.state['username']);\n      setDeviceState(getCommandsAndDevicesByUser);\n      setState(states => ({ ...states, username:location.state['username'], command:getCommandsAndDevicesByUser[0]['command']}));\n    }\n    \n    fetchCommandsAndDevices();\n}, []);\n\nconst handleChange = async (e) => {\n  const getCommandByDeviceID = await GetApi.getCommandByDeviceID(location.state['username'], e.target.value);\n  setState(states => ({ ...states, username:location.state['username'], device:getCommandByDeviceID['device'] ,command:getCommandByDeviceID['command']}))\n}\n  \n  return (\n    <div>\n      <p style={{fontSize:'28px'}}>The Device:</p>\n      <select style={{width:'500px', height:'50px', fontSize:'28px'}}\n       onChange={e => handleChange(e)}>\n        {devices.map(device => (\n          <option\n            key={device['device']}\n            value={device['device']}\n          >\n            {device['device']}\n          </option>\n        ))}\n      </select>\n      <CommandForm value={states}></CommandForm>\n    </div>\n    \n  );\n}\n\nexport default DropDownMenu","import React from 'react';\nimport DevicesMenu from './DevicesMenu.js';\nimport LogOut from './LogOut.js';\n\nconst DevicesAndCommands = () => {\n    return (\n      <div style={{ color:'white', minHeight: '100vh', backgroundColor:'#282c34', display:'flex', flexDirection: 'column',\n      alignItems: 'center', justifyContent: 'center'}}>\n        <LogOut></LogOut>\n        <DevicesMenu></DevicesMenu>\n      </div>\n    );\n}\n\nexport default DevicesAndCommands","import React, { useState, useEffect } from 'react';\nimport LoginForm from './Components/Login.js';\nimport Core from './Components/Core.js';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport DevicesAndCommands from './Components/DevicesAndCommands.js';\n\n\nconst App = () => {\n   return (\n     <Router>\n       <div style={{ color:'white', minHeight: '100vh', backgroundColor:'#282c34', display:'flex', flexDirection: 'column',\n          alignItems: 'center', justifyContent: 'center'}}>\n        <Route path='/' exact component={LoginForm}></Route>\n        <Route path='/devicesandcommands' exact component={DevicesAndCommands}></Route>\n        <Route path=\"/core\" exact component={Core}></Route>\n      </div>\n     </Router> \n    );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}